
=======cross compiling micropython===python3===rshell==============
install python 3.x first,
sudo pip3 install rshell
========cross compiling micropython===python3===rshell==============

========cross compiling micropython===GCC ARM================
GCC ARM embedded only builds from source on old old ubuntu.
If you want gdb and pyocd, you need 32 python2.7 and it works best in a container or VM...yuk!

So, skip the IDE crap and just install a precompiled release version in your home dir:
wget  https://launchpad.net/gcc-arm-embedded/+download
r /usr/local -- I like /usr/local/gcc-arm-embedded with a symlink to the current version as below:
cd /usr/local
wget https://launchpad.net/gcc-arm-embedded/5.0/5-2016-q2-update/+download/gcc-arm-none-eabi-5_4-2016q2-20160622-linux.tar.bz2

========cross compiling micropython===GCC ARM================
=================install gcc-arm-embedded====================
sudo mkdir /usr/local/gcc-arm-embedded
or....
sudo ln -s /usr/local/gcc-arm-none-eabi-5_4-2016q2  /usr/local/gcc-arm-embedded
# This symlink can be changed when a new /gcc-arm-embedded toolchain is available and is untar'd here.

cd
john@ecolab3 [~]which arm-none-eabi-gcc
/usr/local/gcc-arm-embedded/bin/arm-none-eabi-gcc
#If you get a result like the above, you're ready to use the toolchain from any directory.
=================install gcc-arm-embedded====================

========cross compiling micropython=====micropython==============
cd
# Install micropython in your home dir
git clone --recursive https://github.com/micropython/micropython.git
cd micropython/
git submodule update --init
git checkout -b release-1.8.2 v1.8.2
#Now the local checkout of micropython is not on the bleeding edge, but version 1.8.2
or..
git checkout master
git pull
git checkout rel-1.8.2
git submodule update --init
git status
On branch rel-1.8.2
Untracked files:
  (use "git add <file>..." to include in what will be committed)

	stmhal/boards/G30TH/

[these files show as untracked because they are not in main micropython, we 
added them from Hylands's repo.]
 

cd stmhal
make BOARD=G30TH
.
.  # Goes for a minute or so with a 2 core 2GHz machine with 3GB RAM...
.
CC usbdev/class/src/usbd_msc_bot.c
CC usbdev/class/src/usbd_msc_scsi.c
CC usbdev/class/src/usbd_msc_data.c
CC build-NUCLEO_F401RE/pins_NUCLEO_F401RE.c
LINK build-NUCLEO_F401RE/firmware.elf
   text	   data	    bss	    dec	    hex	filename
 271764	    264	  44156	 316184	  4d318	build-NUCLEO_F401RE/firmware.elf
Create build-NUCLEO_F401RE/firmware.dfu
Create build-NUCLEO_F401RE/firmware.hex
#If the last lines are like above with no errors, you're looking good.

========cross compiling micropython=====micropython==============

===============flash a G30TH===============================
first, get micropython and https://github.com/dhylands/G30TH, install G30TH into
micropython/stmhal/boards
If the G30TH has been unprotected once that step need not be done again -- and all that I shipped
have had that step done already, so skip 3, 4, but step 5,6 can be usefule if you load code that stops you
from being able to use the REPL, or rshell.


make the firmware for micropython on the G30TH:

cd micropython/stmhal
If there has been a run before and if not added to the makefile actions:
rm -rf build-G30TH/*

then run make:
john@ecolab3 [stmhal]make BOARD=G30TH
Use make V=1 or set BUILD_VERBOSE in your environment to increase build verbosity.
Create build-G30TH/genhdr/pins.h
Create stmconst build-G30TH/modstm_qstr.h
Create build-G30TH/genhdr/pybcdc.inf
Create build-G30TH/genhdr/pybcdc_inf.h
Generating build-G30TH/genhdr/mpversion.h
GEN build-G30TH/genhdr/qstr.i.last
GEN build-G30TH/genhdr/qstr.split
GEN build-G30TH/genhdr/qstrdefs.collected.h
QSTR updated
GEN build-G30TH/genhdr/qstrdefs.generated.h
CC ../py/mpstate.c
CC ../py/nlrx86.S
CC ../py/nlrx64.S
CC ../py/nlrthumb.c
CC ../py/nlrxtensa.S
CC ../py/nlrsetjmp.c
.
.
.
CC usbdev/class/src/usbd_msc_bot.c
CC usbdev/class/src/usbd_msc_scsi.c
CC usbdev/class/src/usbd_msc_data.c
CC build-G30TH/pins_G30TH.c
LINK build-G30TH/firmware.elf
   text	   data	    bss	    dec	    hex	filename
 277228	    276	  44260	 321764	  4e8e4	build-G30TH/firmware.elf
Create build-G30TH/firmware.dfu
Create build-G30TH/firmware.hex

2.
jumper b0 pad to +3.3 volts, remove 3.3V, plug back 3.3V.
Or...  remove USB5V (and 3v3 with it) hold minigrabber boot0 to 3.3V,
while plugging in USB to get into DFU mode.

3.  The firmware on the G30TH is protected, so the first thing is getinto DFU modea
and confirm the STM32F4 is in DFU mode as below ... 

john@ecolab3 [~]lsusb
Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 007 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
Bus 006 Device 002: ID 17ef:1003 Lenovo Integrated Smart Card Reader
Bus 006 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
Bus 005 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 004 Device 004: ID 0483:df11 STMicroelectronics STM Device in DFU Mode  ********Must_see_this*************
Bus 004 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
Bus 003 Device 002: ID 0483:2016 STMicroelectronics Fingerprint Reader
Bus 003 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub

john@ecolab3 [~]dfu-util --list
dfu-util 0.9

Copyright 2005-2009 Weston Schmidt, Harald Welte and OpenMoko Inc.
Copyright 2010-2016 Tormod Volden and Stefan Schmidt
This program is Free Software and has ABSOLUTELY NO WARRANTY
Please report bugs to http://sourceforge.net/p/dfu-util/tickets/

Found DFU: [0483:df11] ver=2200, devnum=4, cfg=1, intf=0, path="4-1", alt=3, name="@Device Feature/0xFFFF0000/01*004 e", serial="345234543234"
Found DFU: [0483:df11] ver=2200, devnum=4, cfg=1, intf=0, path="4-1", alt=2, name="@OTP Memory /0x1FFF7800/01*512 e,01*016 e", serial="345234543234"
Found DFU: [0483:df11] ver=2200, devnum=4, cfg=1, intf=0, path="4-1", alt=1, name="@Option Bytes  /0x1FFFC000/01*016 e", serial="345234543234"
Found DFU: [0483:df11] ver=2200, devnum=4, cfg=1, intf=0, path="4-1", alt=0, name="@Internal Flash  /0x08000000/04*016Kg,01*064Kg,03*128Kg", serial="345234543234"

4.  The device can be unprotected using dfu-util: ( erase .NET firmware)

john@ecolab3 [stmhal]dfu-util -s :unprotect:force -a 0 -d 0483:df11 -D build-G30TH/firmware.dfu
dfu-util 0.9

Copyright 2005-2009 Weston Schmidt, Harald Welte and OpenMoko Inc.
Copyright 2010-2016 Tormod Volden and Stefan Schmidt
This program is Free Software and has ABSOLUTELY NO WARRANTY
Please report bugs to http://sourceforge.net/p/dfu-util/tickets/

Opening DFU capable USB device...
ID 0483:df11
Run-time device DFU version 011a
Claiming USB DFU Interface...
Setting Alternate Setting #0 ...
Determining device status: state = dfuERROR, status = 10
dfuERROR, clearing status
Determining device status: state = dfuIDLE, status = 0
dfuIDLE, continuing
DFU mode device DFU version 011a
Device returned transfer size 2048
DfuSe interface name: "Internal Flash  "
Device disconnects, erases flash and resets now

5.  Unprotecting the device also resets the device, so you'll need to put it back into DFU mode once more
with the minigrabber and USB plug shuffle as above.

6.  mass erase:
dfu-util -s :mass-erase:force -a 0 -d 0483:df11 -D  build-G30TH/firmware.dfu

7.  put it back into DFU mode once more
with the minigrabber and USB plug shuffle as above.

8. Install micropython:

make BOARD=G30TH deploy

reboot and test REPL with rshell.


