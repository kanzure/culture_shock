1	Leave both boot jumpers to "0".
2 	Have OpenOCD installed,
	git clone https://git.code.sf.net/p/openocd/code openocd-code
	
3	a file in /etc/udev/rules.d
4	Assuming a Linux host and system-wide default OpenOCD installation, check if connectivity is okay, the MCU is alive, and OpenOCD can talk to it:

     openocd -f interface/stlink-v2.cfg -f target/stm32f1x_stlink.cfg

Depending on the OpenOCD version, the following may also work:

     openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg

If things are good, OpenOCD will print some information about the MCU (voltage, number of HW breakpoints, etc) and keep running.


5	

5    	It may be possible to run OpenOCD as a daemon and use telnet to use it, but I think it is more convenient to start it every
	time. Assuming you have a properlycompiled binary, let's say, blinky.bin, you can program it into the MCU with the following script:
	
	OPENOCD="openocd -f interface/stlink-v2.cfg -f target/stm32f1x_stlink.cfg"
    	$OPENOCD -c "init" -c "reset halt" -c "stm32f1x mass_erase 0" -c "flash write_bank 0 blinky.bin 0" -c "reset run" -c "shutdown"

	Note that there is the file name inside this script that you will need to adjust. 
	It is probably a good idea to start with something really simple.

========================use the "program" helper of openocd to laod code===================
configure OpenOCD and start it up.

A simple way to organize them all involves keeping a single directory for your work with a given board. When you start OpenOCD from that directory, it searches there first for configuration files, scripts, and for code you upload to the target board.  It is also the natural place to write files, such as log files and data you download from the board. 

how you start the server:

    Many -f file or -c command options on the command line
    No options, but a user config file in the current directory named openocd.cfg 

Config files:
======================
Three main types of non-user configuration file each have their own subdirectory in the scripts directory:

    interface – one for each different debug adapter;
    board – one for each different board
    target – the chips which integrate CPUs and other JTAG TAPs 

Best case: include just two files, and they handle everything else. The first is an interface config file. The second is board-specific, and it sets up the JTAG TAPs and their GDB targets (by deferring to some target.cfg file), declares all flash memory, and leaves you nothing to do except meet your deadline:

source [find interface/olimex-jtag-tiny.cfg]
source [find board/csb337.cfg]

Boards with a single microcontroller often won’t need more than the target config file, as in the AT91SAM7X256 example. That’s because there is no external memory (flash, DDR RAM), and the board differences are encapsulated by application code.
Maybe you don’t know yet what your board looks like to JTAG. Once you know the interface.cfg file to use, you may need help from OpenOCD to discover what’s on the board. Once you find the JTAG TAPs, you can just search for appropriate target and board configuration files ... or write your own, from the bottom up. See Autoprobing.
You can often reuse some standard config files but need to write a few new ones, probably a board.cfg file. You will be using commands described later in this User’s Guide, and working with the guidelines in the next chapter. 









========================use the "program" helper of openocd to laod code===================
