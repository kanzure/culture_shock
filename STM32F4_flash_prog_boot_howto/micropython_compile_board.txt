========cross compiling micropython===GCC_ARM+micropython+python3+stlink+rshell==============


========compiling python3===rshell==============
install python 3.x first,
sudo pip3 install rshell


========compiling GCC ARM================
GCC ARM embedded only builds from source on old old ubuntu.
If you want gdb and pyocd, you need 32 python2.7 and it works best in a container or VM...yuk!

So, skip the IDE crap and just install a precompiled release version in your home dir:
wget  https://launchpad.net/gcc-arm-embedded/+download
r /usr/local -- I like /usr/local/gcc-arm-embedded with a symlink to the current version as below:
cd /usr/local
wget https://launchpad.net/gcc-arm-embedded/5.0/5-2016-q2-update/+download/gcc-arm-none-eabi-5_4-2016q2-20160622-linux.tar.bz2

========compiling GCC ARM================
=================install gcc-arm-embedded====================
sudo mkdir /usr/local/gcc-arm-embedded
sudo ln -s /usr/local/gcc-arm-none-eabi-5_4-2016q2  /usr/local/gcc-arm-embedded
# This symlink can be changed when a new /gcc-arm-embedded toolchain is available and is untar'd here.

cd
john@ecolab3 [~]which arm-none-eabi-gcc
/usr/local/gcc-arm-embedded/bin/arm-none-eabi-gcc
#If you get a result like the above, you're ready to use the toolchain from any directory.
=================install gcc-arm-embedded====================

========================BOARD=PYFLEX_F401==============pins.csv======================

For each name of a pin found in the datasheet STM32F401CE.pdf, give it a new name, (optionally),
in pins.csv, without comments and nothing but existing names from STM32F401CE.pdf pin lists on right side.

========================BOARD=PYFLEX_F401==============pins.csv======================

========cross compiling micropython=====micropython==============
cd
# Install micropython in your home dir
sudo git clone --recursive https://github.com/micropython/micropython.git
cd micropython/
sudo git submodule update --init
sudo git fetch origin
sudo git pull
sudo git submodule sync
sudo git submodule update

git checkout -b release-1.9.3 v1.9.3
#Now the local checkout of micropython is not on the bleeding edge, but version 1.8.1 

cd stmhal
make BOARD=NUCLEO_F401RE
.
.  # Goes for a minute or so with a 2 core 2GHz machine with 3GB RAM...
.
CC usbdev/class/src/usbd_msc_bot.c
CC usbdev/class/src/usbd_msc_scsi.c
CC usbdev/class/src/usbd_msc_data.c
CC build-NUCLEO_F401RE/pins_NUCLEO_F401RE.c
LINK build-NUCLEO_F401RE/firmware.elf
   text	   data	    bss	    dec	    hex	filename
 271764	    264	  44156	 316184	  4d318	build-NUCLEO_F401RE/firmware.elf
Create build-NUCLEO_F401RE/firmware.dfu
Create build-NUCLEO_F401RE/firmware.hex
#If the last lines are like above with no errors, you're looking good.

========cross compiling micropython=====micropython==============

========cross compiling micropython=====flashing a Nucleo-F401RE with stlink==============
st-util
john@ecolab3 [stmhal]st-util
2016-06-30T17:14:48 INFO /usr/local/src/stlink/src/common.c: Loading device parameters....
2016-06-30T17:14:48 INFO /usr/local/src/stlink/src/common.c: Device connected is: F4 device (Dynamic Efficency), id 0x10016433
2016-06-30T17:14:48 INFO /usr/local/src/stlink/src/common.c: SRAM size: 0x18000 bytes (96 KiB), Flash: 0x80000 bytes (512 KiB) in pages of 16384 bytes
2016-06-30T17:14:48 INFO /usr/local/src/stlink/src/gdbserver/gdb-server.c: Chip ID is 00000433, Core ID is  2ba01477.
<ctl> c to end st-util

make BOARD=NUCLEO_F401RE deploy-stlink
.
.
size: 32768
size: 32624
2016-06-30T17:10:40 INFO /usr/local/src/stlink/src/common.c: Starting verification of write complete
2016-06-30T17:10:42 INFO /usr/local/src/stlink/src/common.c: Flash written and verified! jolly good!
# If you don't get a result like above, check jumpers:
# CN1 on;  CN12 on; JP1 off; JP5 towards U5V; JP6 on
# If error unknown chip id! try pushing reset before/during  deploy-stlink command
========cross compiling micropython=====flashing a Nucleo-F401RE with stlink==============
