1	Leave both boot jumpers to "0".
2 	Have OpenOCD installed,
3	a file in /etc/udev/rules.d
4	Assuming a Linux host and system-wide default OpenOCD installation, check if connectivity is okay, the MCU is alive, and OpenOCD can talk to it:

     openocd -f interface/stlink-v2.cfg -f target/stm32f1x_stlink.cfg

Depending on the OpenOCD version, the following may also work:

     openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg

If things are good, OpenOCD will print some information about the MCU (voltage, number of HW breakpoints, etc) and keep running.


5	

5    	It may be possible to run OpenOCD as a daemon and use telnet to use it, but I think it is more convenient to start it every
	time. Assuming you have a properlycompiled binary, let's say, blinky.bin, you can program it into the MCU with the following script:
	
	OPENOCD="openocd -f interface/stlink-v2.cfg -f target/stm32f1x_stlink.cfg"
    	$OPENOCD -c "init" -c "reset halt" -c "stm32f1x mass_erase 0" -c "flash write_bank 0 blinky.bin 0" -c "reset run" -c "shutdown"

	Note that there is the file name inside this script that you will need to adjust. 
	It is probably a good idea to start with something really simple.
